{"version":3,"file":"static/js/110.2f57e1a4.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/createSuper.js","../node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/inherits.js","js/util/util.js","js/core/eventable.js","js/slide/placeholder.js","js/slide/content.js","js/util/viewport-size.js","js/slide/zoom-level.js","js/slide/loader.js","js/core/base.js","js/lightbox/lightbox.js"],"sourcesContent":["export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn.js\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return possibleConstructorReturn(this, result);\n  };\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @template {keyof HTMLElementTagNameMap} T\r\n * @param {string} className\r\n * @param {T} tagName\r\n * @param {Node} [appendToEl]\r\n * @returns {HTMLElementTagNameMap[T]}\r\n */\r\nexport function createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName);\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nexport function equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nexport function roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {number}\r\n */\r\nexport function getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are equal\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {boolean}\r\n */\r\nexport function pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n * @returns {number}\r\n */\r\nexport function clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n * @returns {string}\r\n */\r\nexport function toTransformString(x, y, scale) {\r\n  let propValue = `translate3d(${x}px,${y || 0}px,0)`;\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ` scale3d(${scale},${scale},1)`;\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n */\r\nexport function setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string} [prop] CSS property to animate\r\n * @param {number} [duration] in ms\r\n * @param {string} [ease] CSS easing function\r\n */\r\nexport function setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? `${prop} ${duration}ms ${ease || defaultCSSEasing}`\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nexport function setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? `${w}px` : w;\r\n  el.style.height = (typeof h === 'number') ? `${h}px` : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nexport function removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nexport function decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode().catch(() => {});\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nexport const LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n * @returns {boolean}\r\n */\r\nexport function specialKeyUsed(e) {\r\n  return ('button' in e && e.button === 1) || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} [option]\r\n * @param {string} [legacySelector]\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nexport function getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n * @returns {boolean}\r\n */\r\nexport function isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nexport function isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\r\n\r\n","/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide | undefined, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point | undefined, transitionDuration: number | false | undefined }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource | undefined, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource | undefined) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement | null | undefined, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds | undefined, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    this.defaultPrevented = false;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe | undefined} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions | undefined} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name]?.push({ fn, priority });\r\n    this._filters[name]?.sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    this.pswp?.addFilter(name, fn, priority);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    this._filters[name]?.forEach((filter) => {\r\n      // @ts-expect-error\r\n      args[0] = filter.fn.apply(this, args);\r\n    });\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name]?.push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    this.pswp?.on(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    this.pswp?.off(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    this._listeners[name]?.forEach((listener) => {\r\n      listener.call(this, event);\r\n    });\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nexport default Eventable;\r\n","import { createElement, setWidthHeight, toTransformString } from '../util/util.js';\r\n\r\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    /** @type {HTMLImageElement | HTMLDivElement | null} */\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : 'div',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      const imgEl = /** @type {HTMLImageElement} */ (this.element);\r\n      imgEl.decoding = 'async';\r\n      imgEl.alt = '';\r\n      imgEl.src = imageSrc;\r\n      imgEl.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hidden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element?.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\r\n\r\nexport default Placeholder;\r\n","import { createElement, isSafari, LOAD_STATE, setWidthHeight } from '../util/util.js';\r\nimport Placeholder from './placeholder.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {Placeholder | undefined} */\r\n    this.placeholder = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.slide = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    this.isDecoding = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = undefined;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean} isLazy\r\n   * @param {boolean} [reload]\r\n   */\r\n  load(isLazy, reload) {\r\n    if (this.slide && this.usePlaceholder()) {\r\n      if (!this.placeholder) {\r\n        const placeholderSrc = this.instance.applyFilters(\r\n          'placeholderSrc',\r\n          // use  image-based placeholder only for the first slide,\r\n          // as rendering (even small stretched thumbnail) is an expensive operation\r\n          (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n          this\r\n        );\r\n        this.placeholder = new Placeholder(\r\n          placeholderSrc,\r\n          this.slide.container\r\n        );\r\n      } else {\r\n        const placeholderEl = this.placeholder.element;\r\n        // Add placeholder to DOM if it was already created\r\n        if (placeholderEl && !placeholderEl.parentElement) {\r\n          this.slide.container.prepend(placeholderEl);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content', 'div');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    if (!this.isImageContent()\r\n      || !this.element\r\n      || this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src ?? '';\r\n    imageElement.alt = this.data.alt ?? '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide && this.element) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is in error state\r\n   */\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    if (this.instance.dispatch(\r\n      'contentResize',\r\n      { content: this, width, height }).defaultPrevented\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        this.instance.dispatch(\r\n          'imageSizeChange',\r\n          { slide: this.slide, width, height, content: this }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (!this.isImageContent() || !this.element || !this.data.srcset) {\r\n      return;\r\n    }\r\n\r\n    const image = /** @type HTMLImageElement */ (this.element);\r\n    const sizesWidth = this.instance.applyFilters(\r\n      'srcsetSizesWidth',\r\n      this.displayedImageWidth,\r\n      this\r\n    );\r\n\r\n    if (\r\n      !image.dataset.largestUsedSize\r\n      || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)\r\n    ) {\r\n      image.sizes = sizesWidth + 'px';\r\n      image.dataset.largestUsedSize = String(sizesWidth);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = undefined;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.destroy();\r\n      this.placeholder = undefined;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      let errorMsgEl = createElement('pswp__error-msg', 'div');\r\n      errorMsgEl.innerText = this.instance.options?.errorMsg ?? '';\r\n      errorMsgEl = /** @type {HTMLDivElement} */ (this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      ));\r\n      this.element = createElement('pswp__content pswp__error-msg-container', 'div');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached || !this.element) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().catch(() => {}).finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.slide && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented\r\n      || !this.slide) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n      // add image to slide when it becomes active,\r\n      // even if it's not finished decoding\r\n      this.appendImage();\r\n    } else if (this.isError()) {\r\n      this.load(false, true); // try to reload\r\n    }\r\n\r\n    if (this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'false');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n    if (this.slide && this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n\r\n    if (this.placeholder && this.placeholder.element) {\r\n      this.placeholder.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipeBase} pswp\r\n * @returns {Point}\r\n */\r\nexport function getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {Point} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nexport function parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  let paddingValue = 0;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return Number(paddingValue) || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {Point} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n * @returns {Point}\r\n */\r\nexport function getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n","const MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n    /** @type { Point | null } */\r\n    this.panAreaSize = null;\r\n    /** @type { Point | null } */\r\n    this.elementSize = null;\r\n    this.fit = 1;\r\n    this.fill = 1;\r\n    this.vFill = 1;\r\n    this.initial = 1;\r\n    this.secondary = 1;\r\n    this.max = 1;\r\n    this.min = 1;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {Point} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    /** @type {Point} */\r\n    const elementSize = { x: maxWidth, y: maxHeight };\r\n    this.elementSize = elementSize;\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = panAreaSize.x / elementSize.x;\r\n    const vRatio = panAreaSize.y / elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   * @returns { number | undefined }\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (\r\n      optionPrefix + 'ZoomLevel'\r\n    );\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return this._parseZoomLevelOption('max') || Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\nexport default ZoomLevel;\r\n","import { getViewportSize, getPanAreaSize } from '../util/viewport-size.js';\r\nimport ZoomLevel from './zoom-level.js';\r\n\r\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n * @param {number} index\r\n * @returns {Content} Image that is being decoded or false.\r\n */\r\nexport function lazyLoadData(itemData, instance, index) {\r\n  const content = instance.createContentFromData(itemData, index);\r\n  /** @type {ZoomLevel | undefined} */\r\n  let zoomLevel;\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset, and we need to define sizes\r\n  if (options) {\r\n    zoomLevel = new ZoomLevel(options, itemData, -1);\r\n\r\n    let viewportSize;\r\n    if (instance.pswp) {\r\n      viewportSize = instance.pswp.viewportSize;\r\n    } else {\r\n      viewportSize = getViewportSize(options, instance);\r\n    }\r\n\r\n    const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n    zoomLevel.update(content.width, content.height, panAreaSize);\r\n  }\r\n\r\n  content.lazyLoad();\r\n\r\n  if (zoomLevel) {\r\n    content.setDisplayedSize(\r\n      Math.ceil(content.width * zoomLevel.initial),\r\n      Math.ceil(content.height * zoomLevel.initial)\r\n    );\r\n  }\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default, it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n * @returns {Content | undefined}\r\n */\r\nexport function lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number} [diff] Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} initialIndex\r\n   */\r\n  loadSlideByIndex(initialIndex) {\r\n    const index = this.pswp.getLoopedIndex(initialIndex);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   * @returns {Content}\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      this.addToCache(content);\r\n    }\r\n\r\n    // assign slide to content\r\n    content.setSlide(slide);\r\n\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   * @returns {Content | undefined}\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = [];\r\n  }\r\n}\r\n\r\nexport default ContentLoader;\r\n","import Eventable from './eventable.js';\r\nimport { getElementsFromOption } from '../util/util.js';\r\nimport Content from '../slide/content.js';\r\nimport { lazyLoadData } from '../slide/loader.js';\r\n\r\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems = 0;\r\n    const dataSource = this.options?.dataSource;\r\n\r\n    if (dataSource && 'length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   * @returns {Content}\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   * @returns {SlideData}\r\n   */\r\n  getItemData(index) {\r\n    const dataSource = this.options?.dataSource;\r\n    /** @type {SlideData | HTMLElement} */\r\n    let dataSourceItem = {};\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   * @returns {HTMLElement[]}\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options?.children || this.options?.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   * @returns {SlideData}\r\n   */\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (\r\n      element.tagName === 'A'\r\n        ? element\r\n        : element.querySelector('a')\r\n    );\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;\r\n      itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0;\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt') ?? '';\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns {Content} Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeBase;\r\n","import {\r\n  specialKeyUsed,\r\n  getElementsFromOption,\r\n  isPswpClass\r\n} from '../util/util.js';\r\n\r\nimport PhotoSwipeBase from '../core/base.js';\r\nimport { lazyLoadSlide } from '../slide/loader.js';\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/content.js').default} Content */\r\n/** @typedef {import('../core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('../core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n\r\n/**\r\n * PhotoSwipe Lightbox\r\n *\r\n * - If user has unsupported browser it falls back to default browser action (just opens URL)\r\n * - Binds click event to links that should open PhotoSwipe\r\n * - parses DOM strcture for PhotoSwipe (retrieves large image URLs and sizes)\r\n * - Initializes PhotoSwipe\r\n *\r\n *\r\n * Loader options use the same object as PhotoSwipe, and supports such options:\r\n *\r\n * gallery - Element | Element[] | NodeList | string selector for the gallery element\r\n * children - Element | Element[] | NodeList | string selector for the gallery children\r\n *\r\n */\r\nclass PhotoSwipeLightbox extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} [options]\r\n   */\r\n  constructor(options) {\r\n    super();\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = options || {};\r\n    this._uid = 0;\r\n    this.shouldOpen = false;\r\n    /**\r\n     * @private\r\n     * @type {Content | undefined}\r\n     */\r\n    this._preloadedContent = undefined;\r\n\r\n    this.onThumbnailsClick = this.onThumbnailsClick.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Initialize lightbox, should be called only once.\r\n   * It's not included in the main constructor, so you may bind events before it.\r\n   */\r\n  init() {\r\n    // Bind click events to each gallery\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.addEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} e\r\n   */\r\n  onThumbnailsClick(e) {\r\n    // Exit and allow default browser action if:\r\n    if (specialKeyUsed(e) // ... if clicked with a special key (ctrl/cmd...)\r\n        || window.pswp // ... if PhotoSwipe is already open\r\n        || window.navigator.onLine === false) { // ... if offline\r\n      return;\r\n    }\r\n\r\n    // If both clientX and clientY are 0 or not defined,\r\n    // the event is likely triggered by keyboard,\r\n    // so we do not pass the initialPoint\r\n    //\r\n    // Note that some screen readers emulate the mouse position,\r\n    // so it's not the ideal way to detect them.\r\n    //\r\n    /** @type {Point | null} */\r\n    let initialPoint = { x: e.clientX, y: e.clientY };\r\n\r\n    if (!initialPoint.x && !initialPoint.y) {\r\n      initialPoint = null;\r\n    }\r\n\r\n    let clickedIndex = this.getClickedIndex(e);\r\n    clickedIndex = this.applyFilters('clickedIndex', clickedIndex, e, this);\r\n    /** @type {DataSource} */\r\n    const dataSource = {\r\n      gallery: /** @type {HTMLElement} */ (e.currentTarget)\r\n    };\r\n\r\n    if (clickedIndex >= 0) {\r\n      e.preventDefault();\r\n      this.loadAndOpen(clickedIndex, dataSource, initialPoint);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get index of gallery item that was clicked.\r\n   *\r\n   * @param {MouseEvent} e click event\r\n   * @returns {number}\r\n   */\r\n  getClickedIndex(e) {\r\n    // legacy option\r\n    if (this.options.getClickedIndexFn) {\r\n      return this.options.getClickedIndexFn.call(this, e);\r\n    }\r\n\r\n    const clickedTarget = /** @type {HTMLElement} */ (e.target);\r\n    const childElements = getElementsFromOption(\r\n      this.options.children,\r\n      this.options.childSelector,\r\n      /** @type {HTMLElement} */ (e.currentTarget)\r\n    );\r\n    const clickedChildIndex = childElements.findIndex(\r\n      child => child === clickedTarget || child.contains(clickedTarget)\r\n    );\r\n\r\n    if (clickedChildIndex !== -1) {\r\n      return clickedChildIndex;\r\n    } else if (this.options.children || this.options.childSelector) {\r\n      // click wasn't on a child element\r\n      return -1;\r\n    }\r\n\r\n    // There is only one item (which is the gallery)\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Load and open PhotoSwipe\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource} dataSource\r\n   * @param {Point | null} [initialPoint]\r\n   * @returns {boolean}\r\n   */\r\n  loadAndOpen(index, dataSource, initialPoint) {\r\n    // Check if the gallery is already open\r\n    if (window.pswp) {\r\n      return false;\r\n    }\r\n\r\n    // set initial index\r\n    this.options.index = index;\r\n\r\n    // define options for PhotoSwipe constructor\r\n    this.options.initialPointerPos = initialPoint;\r\n\r\n    this.shouldOpen = true;\r\n    this.preload(index, dataSource);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Load the main module and the slide content by index\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource} [dataSource]\r\n   */\r\n  preload(index, dataSource) {\r\n    const { options } = this;\r\n\r\n    if (dataSource) {\r\n      options.dataSource = dataSource;\r\n    }\r\n\r\n    // Add the main module\r\n    /** @type {Promise<Type<PhotoSwipe>>[]} */\r\n    const promiseArray = [];\r\n\r\n    const pswpModuleType = typeof options.pswpModule;\r\n    if (isPswpClass(options.pswpModule)) {\r\n      promiseArray.push(Promise.resolve(/** @type {Type<PhotoSwipe>} */ (options.pswpModule)));\r\n    } else if (pswpModuleType === 'string') {\r\n      throw new Error('pswpModule as string is no longer supported');\r\n    } else if (pswpModuleType === 'function') {\r\n      promiseArray.push(/** @type {() => Promise<Type<PhotoSwipe>>} */ (options.pswpModule)());\r\n    } else {\r\n      throw new Error('pswpModule is not valid');\r\n    }\r\n\r\n    // Add custom-defined promise, if any\r\n    if (typeof options.openPromise === 'function') {\r\n      // allow developers to perform some task before opening\r\n      promiseArray.push(options.openPromise());\r\n    }\r\n\r\n    if (options.preloadFirstSlide !== false && index >= 0) {\r\n      this._preloadedContent = lazyLoadSlide(index, this);\r\n    }\r\n\r\n    // Wait till all promises resolve and open PhotoSwipe\r\n    const uid = ++this._uid;\r\n    Promise.all(promiseArray).then((iterableModules) => {\r\n      if (this.shouldOpen) {\r\n        const mainModule = iterableModules[0];\r\n        this._openPhotoswipe(mainModule, uid);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} module\r\n   * @param {number} uid\r\n   */\r\n  _openPhotoswipe(module, uid) {\r\n    // Cancel opening if UID doesn't match the current one\r\n    // (if user clicked on another gallery item before current was loaded).\r\n    //\r\n    // Or if shouldOpen flag is set to false\r\n    // (developer may modify it via public API)\r\n    if (uid !== this._uid && this.shouldOpen) {\r\n      return;\r\n    }\r\n\r\n    this.shouldOpen = false;\r\n\r\n    // PhotoSwipe is already open\r\n    if (window.pswp) {\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Pass data to PhotoSwipe and open init\r\n     *\r\n     * @type {PhotoSwipe}\r\n     */\r\n    const pswp = typeof module === 'object'\r\n        ? new module.default(this.options) // eslint-disable-line\r\n        : new module(this.options); // eslint-disable-line\r\n\r\n    this.pswp = pswp;\r\n    window.pswp = pswp;\r\n\r\n    // map listeners from Lightbox to PhotoSwipe Core\r\n    /** @type {(keyof PhotoSwipeEventsMap)[]} */\r\n    (Object.keys(this._listeners)).forEach((name) => {\r\n      this._listeners[name]?.forEach((fn) => {\r\n        pswp.on(name, /** @type {EventCallback<typeof name>} */(fn));\r\n      });\r\n    });\r\n\r\n    // same with filters\r\n    /** @type {(keyof PhotoSwipeFiltersMap)[]} */\r\n    (Object.keys(this._filters)).forEach((name) => {\r\n      this._filters[name]?.forEach((filter) => {\r\n        pswp.addFilter(name, filter.fn, filter.priority);\r\n      });\r\n    });\r\n\r\n    if (this._preloadedContent) {\r\n      pswp.contentLoader.addToCache(this._preloadedContent);\r\n      this._preloadedContent = undefined;\r\n    }\r\n\r\n    pswp.on('destroy', () => {\r\n      // clean up public variables\r\n      this.pswp = undefined;\r\n      delete window.pswp;\r\n    });\r\n\r\n    pswp.init();\r\n  }\r\n\r\n  /**\r\n   * Unbinds all events, closes PhotoSwipe if it's open.\r\n   */\r\n  destroy() {\r\n    this.pswp?.destroy();\r\n\r\n    this.shouldOpen = false;\r\n    this._listeners = {};\r\n\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.removeEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeLightbox;\r\n"],"names":["_assertThisInitialized","self","ReferenceError","_getPrototypeOf","o","Object","setPrototypeOf","getPrototypeOf","bind","__proto__","_createSuper","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","prototype","valueOf","call","e","result","Super","NewTarget","this","constructor","arguments","apply","TypeError","assertThisInitialized","_setPrototypeOf","p","_inherits","subClass","superClass","create","value","writable","configurable","defineProperty","createElement","className","tagName","appendToEl","el","document","appendChild","setWidthHeight","w","h","style","width","height","LOAD_STATE","IDLE","LOADING","LOADED","ERROR","getElementsFromOption","option","legacySelector","parent","elements","Element","NodeList","Array","isArray","from","selector","querySelectorAll","isSafari","navigator","vendor","match","PhotoSwipeEvent","type","details","defaultPrevented","assign","Eventable","_listeners","_filters","pswp","undefined","options","name","fn","priority","push","sort","f1","f2","addFilter","filter","removeFilter","args","forEach","on","listener","off","dispatch","event","Placeholder","imageSrc","container","element","imgEl","decoding","alt","src","setAttribute","transformOrigin","transform","x","y","scale","propValue","toTransformString","parentNode","remove","Content","itemData","instance","index","data","placeholder","slide","displayedImageWidth","displayedImageHeight","Number","isAttached","hasSlide","isDecoding","state","content","keepPlaceholder","setTimeout","destroy","isLazy","reload","usePlaceholder","placeholderEl","parentElement","prepend","placeholderSrc","applyFilters","msrc","isFirstSlide","isImageContent","loadImage","innerHTML","html","updateContentSize","imageElement","updateSrcsetSizes","srcset","complete","onLoaded","onload","onerror","onError","isActive","heavyAppended","append","removePlaceholder","displayError","isError","setDisplayedSize","isInitialSizeUpdate","image","sizesWidth","dataset","largestUsedSize","parseInt","sizes","String","load","isLoading","errorMsgEl","innerText","errorMsg","supportsDecode","decode","catch","finally","appendImage","holderElement","parsePaddingOption","prop","viewportSize","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","ZoomLevel","panAreaSize","elementSize","fit","fill","vFill","initial","secondary","max","min","maxWidth","maxHeight","hRatio","vRatio","Math","_getInitial","_getSecondary","_getMax","zoomLevels","slideData","optionPrefix","optionName","optionValue","currZoomLevel","_parseZoomLevelOption","lazyLoadData","zoomLevel","createContentFromData","getViewportSizeFn","newViewportSize","documentElement","clientWidth","window","innerHeight","getViewportSize","getPanAreaSize","update","lazyLoad","ceil","PhotoSwipeBase","numItems","dataSource","length","items","_getGalleryDOMElements","gallery","dataSourceItem","_domElementToItemData","galleryElement","children","childSelector","linkEl","querySelector","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","thumbnailEl","currentSrc","getAttribute","pswpCropped","cropped","thumbCropped","PhotoSwipeLightbox","_uid","shouldOpen","_preloadedContent","onThumbnailsClick","gallerySelector","addEventListener","button","ctrlKey","metaKey","altKey","shiftKey","specialKeyUsed","onLine","initialPoint","clientX","clientY","clickedIndex","getClickedIndex","currentTarget","preventDefault","loadAndOpen","getClickedIndexFn","clickedTarget","target","clickedChildIndex","findIndex","child","contains","initialPointerPos","preload","promiseArray","pswpModuleType","pswpModule","goTo","Promise","resolve","Error","openPromise","preloadFirstSlide","getItemData","lazyLoadSlide","uid","all","then","iterableModules","mainModule","_openPhotoswipe","module","default","keys","contentLoader","addToCache","init","removeEventListener"],"sourceRoot":""}